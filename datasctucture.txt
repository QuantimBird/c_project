gcc -o hello hello.c = Создание испольняемого файла с ИМЕНЕМ

Для указаний ошибок в коде пишем gcc -o filename -Wall -Wextra hello.c

При подклбчении математических функций компиляции проходит с префиксом -lm - gcc -Wall -Wextra namefile -lm




float - тип для работы с вещественным числами напрмер с десятичной точкой 3.14
%f - формат для чтения и печати вещественных чисел
/ - оператор деления Си










Типы                Минимальный Размер
char                8 бит

short intint        16 бит

int                 32 бита

long int            32 бита

long long int       64 бита





Количество Бит  Знаковый диапозон целых чисел
8 бит           от -128 до 127

16 бит          от -32,768 до 32,767

32 бита         от -2,147,483,648 до 2,147,483,647

64 бита         от -9,223,372,854,775,808 до 9,223,372,854,775,807








Спецификатор формата

В printf Спецификатор формата имеет общий вид

%[флаги][ширина][.точность][размер]тип








флаги

+ - указать явно знак числа в том числе положительного
- - выравнивание влево по указанной ширине
0 - дополнять слева числа до указанной ширины не пробелами а 0

printf("%+d %+d\n", 7, -12);             // +7 -12
printf("<%3d> <%3d>\n", 7, 1234);        // <   7> <1234>
pritnf("<%-3d> <%-3d>", 7, 1234);        // <7   > <1234>

int h = 12, m = 5;
pritnf("%02d:%02d\n", h, m);             // 12:05
h = 3;
m = 55;
printf("%02d:%02d\n", h, m);             // 03:55











Восмеричное шестнадцатеричное двоичное


Спецификация            Система                 Тип      
d или i                 десятичное (decimal)    int

u                       беззнаковое десятичное  unsigned int

o                       восьмиричное (octal)    unsigned int

x или x                 шестнадцатеричное(heX)  unsigned int









Модификатор длины

l   - от long
ll  - от long long
h   - от half
hh  - от half half





Спецификатор        Тип
%ld                 long int

%lu                 unsigned long int

%lld                long long int

%llu                unsigned long long int

%hd                 short int

%hu                 unsigned short int

%hhd                char

%hhu                unsigned char

















++ --    Постфиксный суфиксный инкремент и декремент

()       Вызов функции

[]       Доступ к элементу массива

.        Доступ к полю структуры или юниона

->       Доступ к полю юниона через указатель

(type) 
{list}   Составные литералы (С99)




++ --    Префиксный инкеремент и декремент

+ -      Унарный плюс и минус

! ~      Логическое и побитовое отрицание

(type)   Приведение типа

*        Разыменование

&        Взятие адреса

sizeof   Размер

_Alignof Требование выравнивания

* / %    Умножение деление остаток от деления

+ -      Сложение вычитание

<< >>    Побитовый сдвиг

< <=     Меньше, меньше или равно

> >=     Больше, больше или равно

== !=    Равно или не равно

&        Побитовое И

^        Побитовое исключающее ИЛИ

|        Побитовое исключающее ИЛИ

&&       Логическое и

||       Логическое ИЛИ

?:       Тернарный оператор

=        Присвоение

+= -=    Присвоение со сложением и вычитанием

*= /= %/ Присвоение с Умножением, делением, остатком от деления

<<= >>=  Присовение с побитовым сдвигом

&= ^= |= Присвоение с побитовым И, ИЛИ, исключающим ИЛИ



Бит (bit) - это самая маленькая единица хранения инфформации которая может хранить или 0 или 1
Байт (byte) - это наименьшее адресуемая единица информации Пока будет считать что байт это 8 бит так как в последнее время большинство компьютеров имеют именно такую архитектуру

